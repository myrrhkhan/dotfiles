'use strict';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const path_1 = require("path");
function impor(id, rootDir) {
    if (/^\./.test(id)) {
        id = path_1.join(rootDir, id);
    }
    if (ImportJob.importQueue.indexOf(id) === -1) {
        ImportJob.importQueue.push(id);
    }
    let mod;
    return new Proxy((() => { }), {
        apply: (_, thisArg, argumentsList) => {
            if (!mod) {
                ImportJob.removeJob(id);
                mod = require(id);
            }
            return Reflect.apply(mod, thisArg, argumentsList);
        },
        construct: (_, argumentsList) => {
            if (!mod) {
                ImportJob.removeJob(id);
                mod = require(id);
            }
            return Reflect.construct(mod, argumentsList);
        },
        defineProperty: (_, key, attributes) => {
            if (!mod) {
                ImportJob.removeJob(id);
                mod = require(id);
            }
            return Reflect.defineProperty(mod, key, attributes);
        },
        deleteProperty: (_, key) => {
            if (!mod) {
                ImportJob.removeJob(id);
                mod = require(id);
            }
            return Reflect.deleteProperty(mod, key);
        },
        get: (_, key, reciver) => {
            if (!mod) {
                ImportJob.removeJob(id);
                mod = require(id);
            }
            return Reflect.get(mod, key, reciver);
        },
        getPrototypeOf: (_) => {
            if (!mod) {
                ImportJob.removeJob(id);
                mod = require(id);
            }
            return Reflect.getPrototypeOf(mod);
        },
        has: (_, key) => {
            if (!mod) {
                ImportJob.removeJob(id);
                mod = require(id);
            }
            return Reflect.has(mod, key);
        },
        isExtensible: (_) => {
            if (!mod) {
                ImportJob.removeJob(id);
                mod = require(id);
            }
            return Reflect.isExtensible(mod);
        },
        ownKeys: (_) => {
            if (!mod) {
                ImportJob.removeJob(id);
                mod = require(id);
            }
            return mod ? Reflect.ownKeys(mod) : [];
        },
        preventExtensions: (_) => {
            if (!mod) {
                ImportJob.removeJob(id);
                mod = require(id);
            }
            return Reflect.preventExtensions(mod);
        },
        set: (_, key, value, reciver) => {
            if (!mod) {
                ImportJob.removeJob(id);
                mod = require(id);
            }
            return Reflect.set(mod, key, value, reciver);
        },
        setPrototypeOf: (_, value) => {
            if (!mod) {
                ImportJob.removeJob(id);
                mod = require(id);
            }
            return Reflect.setPrototypeOf(mod, value);
        }
    });
}
class ImportJob {
    static importJob() {
        return __awaiter(this, void 0, void 0, function* () {
            if (ImportJob.importJobBusy) {
                return;
            }
            if (ImportJob.importQueue.length === 0) {
                return;
            }
            const id = ImportJob.importQueue.shift();
            if (!id) {
                return;
            }
            ImportJob.importJobBusy = true;
            yield Promise.resolve().then(() => require(id));
            ImportJob.importJobBusy = false;
        });
    }
    static removeJob(id) {
        const index = ImportJob.importQueue.indexOf(id);
        if (index === -1) {
            return;
        }
        ImportJob.importQueue.splice(index, 1);
    }
    static start() {
        if (ImportJob.isStarted) {
            return;
        }
        ImportJob.isStarted = true;
        setInterval(ImportJob.importJob, 1000);
    }
}
ImportJob.isStarted = false;
ImportJob.importQueue = [];
ImportJob.importJobBusy = false;
ImportJob.start();
module.exports = (rootDir) => {
    return (id) => {
        return impor(id, rootDir);
    };
};
//# sourceMappingURL=index.js.map
// SIG // Begin signature block
// SIG // MIInpQYJKoZIhvcNAQcCoIInljCCJ5ICAQExDzANBglg
// SIG // hkgBZQMEAgEFADB3BgorBgEEAYI3AgEEoGkwZzAyBgor
// SIG // BgEEAYI3AgEeMCQCAQEEEBDgyQbOONQRoqMAEEvTUJAC
// SIG // AQACAQACAQACAQACAQAwMTANBglghkgBZQMEAgEFAAQg
// SIG // sygLtaT7wF2/NPBw/4MdTDHKba4WjOQvLRL9afPvJZyg
// SIG // gg2LMIIGCTCCA/GgAwIBAgITMwAAAvJGWactZ6NLuAAA
// SIG // AAAC8jANBgkqhkiG9w0BAQsFADB+MQswCQYDVQQGEwJV
// SIG // UzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMH
// SIG // UmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBv
// SIG // cmF0aW9uMSgwJgYDVQQDEx9NaWNyb3NvZnQgQ29kZSBT
// SIG // aWduaW5nIFBDQSAyMDExMB4XDTIyMDYzMDE3MzgyMVoX
// SIG // DTIzMDkxNTE3MzgyMVowgYgxCzAJBgNVBAYTAlVTMRMw
// SIG // EQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRt
// SIG // b25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRp
// SIG // b24xMjAwBgNVBAMTKU1pY3Jvc29mdCAzcmQgUGFydHkg
// SIG // QXBwbGljYXRpb24gQ29tcG9uZW50MIIBIjANBgkqhkiG
// SIG // 9w0BAQEFAAOCAQ8AMIIBCgKCAQEA2LxvZ9ZsJ/EAoXMi
// SIG // OI9tw70kKlV1+JZ4oPGYkDnuCvmbXtJTdt9JH/c70V94
// SIG // SnI5VzJ1ySyxbopznLabZqDYEC7kZVi+10R2jqGissu2
// SIG // 9XvSuMSkzpA5GXXYDGK5Nbj7m6y9wNS7OomCmyo1+C0y
// SIG // mmw/b9JGwg0X5PAS0TP7jQFRi3tvOf1X7HTner+1kptN
// SIG // fKLEEDFT/xu92fZlflEIyXBnW1plgDBEqCrylxp+VEMh
// SIG // zwrljJpqwQafnKd04YHMDj3Q+L/oGQCXUeRV9ZNdRWl0
// SIG // A8DJmC9OVYmLgCD2c7zqZ7gPKwBY8DkMysKu7DB8uIPc
// SIG // foWIvYxxB17pPcvc7QIDAQABo4IBczCCAW8wHwYDVR0l
// SIG // BBgwFgYKKwYBBAGCN0wRAQYIKwYBBQUHAwMwHQYDVR0O
// SIG // BBYEFOnSIj2aLawEUoblQMMiKgmshi/VMEUGA1UdEQQ+
// SIG // MDykOjA4MR4wHAYDVQQLExVNaWNyb3NvZnQgQ29ycG9y
// SIG // YXRpb24xFjAUBgNVBAUTDTIzMTUyMis0NzEzMzUwHwYD
// SIG // VR0jBBgwFoAUSG5k5VAF04KqFzc3IrVtqMp1ApUwVAYD
// SIG // VR0fBE0wSzBJoEegRYZDaHR0cDovL3d3dy5taWNyb3Nv
// SIG // ZnQuY29tL3BraW9wcy9jcmwvTWljQ29kU2lnUENBMjAx
// SIG // MV8yMDExLTA3LTA4LmNybDBhBggrBgEFBQcBAQRVMFMw
// SIG // UQYIKwYBBQUHMAKGRWh0dHA6Ly93d3cubWljcm9zb2Z0
// SIG // LmNvbS9wa2lvcHMvY2VydHMvTWljQ29kU2lnUENBMjAx
// SIG // MV8yMDExLTA3LTA4LmNydDAMBgNVHRMBAf8EAjAAMA0G
// SIG // CSqGSIb3DQEBCwUAA4ICAQAyJwC9Uu4aRyhcH/tCpVOn
// SIG // PZKT/iMzk1uEVymttSTd8Rr9GTIgAmR4UVybP9lnwvhx
// SIG // rpKtVyFW1YpbXubVrcDtKlhean+AZf0HAN7ZsYG0kgeb
// SIG // 5gayll8YE7vNjak3zNB/IyR3ZAwnP8reNttvL6WOnoPC
// SIG // L2g/2EcNjsx2a8HFHH9a71v7PfAO8Pjp/vYzBzTt0UhR
// SIG // wQlA0bjjRdAgZxExkW1zbzrnWAa0uyephq/2OQsmO2rR
// SIG // IAXRhpc9R9531uiSXHaYMyrmFt0Izmxy1wPvCfjaVTzE
// SIG // WBgeLTazvgJ+BD46vqgWOx5QM4CMBV3l0WvWmnxewIiw
// SIG // W5Q8Z8GUUZ+1OLRiqW0DrSKTMeLwe0EOFAyQIApzd+XZ
// SIG // RuiZS8aQO853O2OTOtVnvOz8AWBthcY20Ul9IfskkinB
// SIG // ZjNHAYm1HHTQHhcvjYoGuTx4h4kiX/az80aqpaeFgAiC
// SIG // 9SlfHVfjj84263ha9bvrGCWSdvYNOmVT0av3YdkFJq2w
// SIG // /uWt+X22b+zl0eOG6VOPUwU1p9GhzNB4eOsx6eq1KC+Z
// SIG // N3fECVOhYVCS1yDvCsa0/b4Wix6rOvsWszNXY8lXkYCV
// SIG // J6ty/muaZtIHB8mKDABcm7qvcDC3NeSNEoJuIJf8v8Ae
// SIG // hVoIfoVB8ZbOBnbg9B1wjY42I3FPQas7TftAoq2v/Yt7
// SIG // eTCCB3owggVioAMCAQICCmEOkNIAAAAAAAMwDQYJKoZI
// SIG // hvcNAQELBQAwgYgxCzAJBgNVBAYTAlVTMRMwEQYDVQQI
// SIG // EwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4w
// SIG // HAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xMjAw
// SIG // BgNVBAMTKU1pY3Jvc29mdCBSb290IENlcnRpZmljYXRl
// SIG // IEF1dGhvcml0eSAyMDExMB4XDTExMDcwODIwNTkwOVoX
// SIG // DTI2MDcwODIxMDkwOVowfjELMAkGA1UEBhMCVVMxEzAR
// SIG // BgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1v
// SIG // bmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlv
// SIG // bjEoMCYGA1UEAxMfTWljcm9zb2Z0IENvZGUgU2lnbmlu
// SIG // ZyBQQ0EgMjAxMTCCAiIwDQYJKoZIhvcNAQEBBQADggIP
// SIG // ADCCAgoCggIBAKvw+nIQHC6t2G6qghBNNLrytlghn0Ib
// SIG // KmvpWlCquAY4GgRJun/DDB7dN2vGEtgL8DjCmQawyDnV
// SIG // ARQxQtOJDXlkh36UYCRsr55JnOloXtLfm1OyCizDr9mp
// SIG // K656Ca/XllnKYBoF6WZ26DJSJhIv56sIUM+zRLdd2MQu
// SIG // A3WraPPLbfM6XKEW9Ea64DhkrG5kNXimoGMPLdNAk/jj
// SIG // 3gcN1Vx5pUkp5w2+oBN3vpQ97/vjK1oQH01WKKJ6cuAS
// SIG // OrdJXtjt7UORg9l7snuGG9k+sYxd6IlPhBryoS9Z5JA7
// SIG // La4zWMW3Pv4y07MDPbGyr5I4ftKdgCz1TlaRITUlwzlu
// SIG // ZH9TupwPrRkjhMv0ugOGjfdf8NBSv4yUh7zAIXQlXxgo
// SIG // tswnKDglmDlKNs98sZKuHCOnqWbsYR9q4ShJnV+I4iVd
// SIG // 0yFLPlLEtVc/JAPw0XpbL9Uj43BdD1FGd7P4AOG8rAKC
// SIG // X9vAFbO9G9RVS+c5oQ/pI0m8GLhEfEXkwcNyeuBy5yTf
// SIG // v0aZxe/CHFfbg43sTUkwp6uO3+xbn6/83bBm4sGXgXvt
// SIG // 1u1L50kppxMopqd9Z4DmimJ4X7IvhNdXnFy/dygo8e1t
// SIG // wyiPLI9AN0/B4YVEicQJTMXUpUMvdJX3bvh4IFgsE11g
// SIG // lZo+TzOE2rCIF96eTvSWsLxGoGyY0uDWiIwLAgMBAAGj
// SIG // ggHtMIIB6TAQBgkrBgEEAYI3FQEEAwIBADAdBgNVHQ4E
// SIG // FgQUSG5k5VAF04KqFzc3IrVtqMp1ApUwGQYJKwYBBAGC
// SIG // NxQCBAweCgBTAHUAYgBDAEEwCwYDVR0PBAQDAgGGMA8G
// SIG // A1UdEwEB/wQFMAMBAf8wHwYDVR0jBBgwFoAUci06AjGQ
// SIG // Q7kUBU7h6qfHMdEjiTQwWgYDVR0fBFMwUTBPoE2gS4ZJ
// SIG // aHR0cDovL2NybC5taWNyb3NvZnQuY29tL3BraS9jcmwv
// SIG // cHJvZHVjdHMvTWljUm9vQ2VyQXV0MjAxMV8yMDExXzAz
// SIG // XzIyLmNybDBeBggrBgEFBQcBAQRSMFAwTgYIKwYBBQUH
// SIG // MAKGQmh0dHA6Ly93d3cubWljcm9zb2Z0LmNvbS9wa2kv
// SIG // Y2VydHMvTWljUm9vQ2VyQXV0MjAxMV8yMDExXzAzXzIy
// SIG // LmNydDCBnwYDVR0gBIGXMIGUMIGRBgkrBgEEAYI3LgMw
// SIG // gYMwPwYIKwYBBQUHAgEWM2h0dHA6Ly93d3cubWljcm9z
// SIG // b2Z0LmNvbS9wa2lvcHMvZG9jcy9wcmltYXJ5Y3BzLmh0
// SIG // bTBABggrBgEFBQcCAjA0HjIgHQBMAGUAZwBhAGwAXwBw
// SIG // AG8AbABpAGMAeQBfAHMAdABhAHQAZQBtAGUAbgB0AC4g
// SIG // HTANBgkqhkiG9w0BAQsFAAOCAgEAZ/KGpZjgVHkaLtPY
// SIG // dGcimwuWEeFjkplCln3SeQyQwWVfLiw++MNy0W2D/r4/
// SIG // 6ArKO79HqaPzadtjvyI1pZddZYSQfYtGUFXYDJJ80hpL
// SIG // HPM8QotS0LD9a+M+By4pm+Y9G6XUtR13lDni6WTJRD14
// SIG // eiPzE32mkHSDjfTLJgJGKsKKELukqQUMm+1o+mgulaAq
// SIG // PyprWEljHwlpblqYluSD9MCP80Yr3vw70L01724lruWv
// SIG // J+3Q3fMOr5kol5hNDj0L8giJ1h/DMhji8MUtzluetEk5
// SIG // CsYKwsatruWy2dsViFFFWDgycScaf7H0J/jeLDogaZiy
// SIG // WYlobm+nt3TDQAUGpgEqKD6CPxNNZgvAs0314Y9/HG8V
// SIG // fUWnduVAKmWjw11SYobDHWM2l4bf2vP48hahmifhzaWX
// SIG // 0O5dY0HjWwechz4GdwbRBrF1HxS+YWG18NzGGwS+30HH
// SIG // Diju3mUv7Jf2oVyW2ADWoUa9WfOXpQlLSBCZgB/QACnF
// SIG // sZulP0V3HjXG0qKin3p6IvpIlR+r+0cjgPWe+L9rt0uX
// SIG // 4ut1eBrs6jeZeRhL/9azI2h15q/6/IvrC4DqaTuv/DDt
// SIG // BEyO3991bWORPdGdVk5Pv4BXIqF4ETIheu9BCrE/+6jM
// SIG // pF3BoYibV3FWTkhFwELJm3ZbCoBIa/15n8G9bW1qyVJz
// SIG // Ew16UM0xghlyMIIZbgIBATCBlTB+MQswCQYDVQQGEwJV
// SIG // UzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMH
// SIG // UmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBv
// SIG // cmF0aW9uMSgwJgYDVQQDEx9NaWNyb3NvZnQgQ29kZSBT
// SIG // aWduaW5nIFBDQSAyMDExAhMzAAAC8kZZpy1no0u4AAAA
// SIG // AALyMA0GCWCGSAFlAwQCAQUAoIGuMBkGCSqGSIb3DQEJ
// SIG // AzEMBgorBgEEAYI3AgEEMBwGCisGAQQBgjcCAQsxDjAM
// SIG // BgorBgEEAYI3AgEVMC8GCSqGSIb3DQEJBDEiBCBKDaH8
// SIG // 8hb/xWHWKVwN72Vl21rDo9BAQSNf0uaJQTdeATBCBgor
// SIG // BgEEAYI3AgEMMTQwMqAUgBIATQBpAGMAcgBvAHMAbwBm
// SIG // AHShGoAYaHR0cDovL3d3dy5taWNyb3NvZnQuY29tMA0G
// SIG // CSqGSIb3DQEBAQUABIIBAJZIDzMKPDm/IuzKAD5AFokt
// SIG // AnZNKqe3ReF059zP2g7fYqBSp/1CbbYpZAgD0bIkBAuq
// SIG // 7XkQOhxF18gBqwPdQ3pnNc0dLp4E+qqyfyDTFRx3axsS
// SIG // kAKuUyOhjlsAycS0oiKIi5S+Jnny4t/Sg/zIspoZXg/s
// SIG // B5cPN9iGw00Khgc6QyEGrcAAU9wnQGweKIRpGtrNXWqy
// SIG // 6sjfAS5LLDPi0oyCwE9epdu4jAYKZVWhyueuTtN1flTy
// SIG // 5TLwccopUvarb/1UHefFPK0945GE+wIPXehdi47TD0Js
// SIG // Dh82RCkXYP7IFtyjNeYfyw5d530I5F3yO/40MdLlfBrA
// SIG // KELw9yZEET6hghb8MIIW+AYKKwYBBAGCNwMDATGCFugw
// SIG // ghbkBgkqhkiG9w0BBwKgghbVMIIW0QIBAzEPMA0GCWCG
// SIG // SAFlAwQCAQUAMIIBUAYLKoZIhvcNAQkQAQSgggE/BIIB
// SIG // OzCCATcCAQEGCisGAQQBhFkKAwEwMTANBglghkgBZQME
// SIG // AgEFAAQgbUt8FZFPQ9JF7pqqU+VaDXZwWXdvQO+t1D+p
// SIG // B76DBZYCBmPuM3OsmRgSMjAyMzAzMTUyMTA2NDAuNTha
// SIG // MASAAgH0oIHQpIHNMIHKMQswCQYDVQQGEwJVUzETMBEG
// SIG // A1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9u
// SIG // ZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9u
// SIG // MSUwIwYDVQQLExxNaWNyb3NvZnQgQW1lcmljYSBPcGVy
// SIG // YXRpb25zMSYwJAYDVQQLEx1UaGFsZXMgVFNTIEVTTjo3
// SIG // QkYxLUUzRUEtQjgwODElMCMGA1UEAxMcTWljcm9zb2Z0
// SIG // IFRpbWUtU3RhbXAgU2VydmljZaCCEVQwggcMMIIE9KAD
// SIG // AgECAhMzAAAByPmw7mft6mtGAAEAAAHIMA0GCSqGSIb3
// SIG // DQEBCwUAMHwxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpX
// SIG // YXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYD
// SIG // VQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xJjAkBgNV
// SIG // BAMTHU1pY3Jvc29mdCBUaW1lLVN0YW1wIFBDQSAyMDEw
// SIG // MB4XDTIyMTEwNDE5MDEzN1oXDTI0MDIwMjE5MDEzN1ow
// SIG // gcoxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5n
// SIG // dG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVN
// SIG // aWNyb3NvZnQgQ29ycG9yYXRpb24xJTAjBgNVBAsTHE1p
// SIG // Y3Jvc29mdCBBbWVyaWNhIE9wZXJhdGlvbnMxJjAkBgNV
// SIG // BAsTHVRoYWxlcyBUU1MgRVNOOjdCRjEtRTNFQS1CODA4
// SIG // MSUwIwYDVQQDExxNaWNyb3NvZnQgVGltZS1TdGFtcCBT
// SIG // ZXJ2aWNlMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIIC
// SIG // CgKCAgEAucudfihPgyRWwnnIuJCqc3TCtFk0XOimFcKj
// SIG // U9bS6WFng2l+FrIid0mPZ7KWs6Ewj21X+ZkGkM6x+ozH
// SIG // lmNtnHSQ48pjIFdlKXIoh7fSo41A4n0tQIlwhs8uIYIo
// SIG // cp72xwDBHKSZxGaEa/0707iyOw+aXZXNcTxgNiREASb9
// SIG // thlLZM75mfJIgBVvUmdLZc+XOUYwz/8ul7IEztPNH4cn
// SIG // 8Cn0tJhIFfp2netr8GYNoiyIqxueG7+sSt2xXl7/igc5
// SIG // cHPZnWhfl9PaB4+SutrA8zAhzVHTnj4RffxA4R3k4BRb
// SIG // PdGowQfOf95ZeYxLTHf5awB0nqZxOY+yuGWhf6hp5RGR
// SIG // ouc9beVZv98M1erYa55S1ahZgGDQJycVtEy82RlmKfTY
// SIG // Y2uNmlPLWtnD7sDlpVkhYQGKuTWnuwQKq9ZTSE+0V2cH
// SIG // 8JaWBYJQMIuWWM83vLPo3IT/S/5jT2oZOS9nsJgwwCwR
// SIG // UtYtwtq8/PJtvt1V6VoG4Wd2/MAifgEJOkHF7ARPqI9X
// SIG // v28+riqJZ5mjLGz84dP2ryoe0lxYSz3PT5ErKoS0+zJp
// SIG // YNAcxbv2UXiTk3Wj/mZ3tulz6z4XnSl5gy0PLer+EVjz
// SIG // 4G96GcZgK2d9G+uYylHWwBneIv9YFQj6yMdW/4sEpkEb
// SIG // rpiJNemcxUCmBipZ7Sc35rv4utkJ4/UCAwEAAaOCATYw
// SIG // ggEyMB0GA1UdDgQWBBS1XC9JgbrSwLDTiJJT4iK7NUvk
// SIG // 9TAfBgNVHSMEGDAWgBSfpxVdAF5iXYP05dJlpxtTNRnp
// SIG // cjBfBgNVHR8EWDBWMFSgUqBQhk5odHRwOi8vd3d3Lm1p
// SIG // Y3Jvc29mdC5jb20vcGtpb3BzL2NybC9NaWNyb3NvZnQl
// SIG // MjBUaW1lLVN0YW1wJTIwUENBJTIwMjAxMCgxKS5jcmww
// SIG // bAYIKwYBBQUHAQEEYDBeMFwGCCsGAQUFBzAChlBodHRw
// SIG // Oi8vd3d3Lm1pY3Jvc29mdC5jb20vcGtpb3BzL2NlcnRz
// SIG // L01pY3Jvc29mdCUyMFRpbWUtU3RhbXAlMjBQQ0ElMjAy
// SIG // MDEwKDEpLmNydDAMBgNVHRMBAf8EAjAAMBMGA1UdJQQM
// SIG // MAoGCCsGAQUFBwMIMA0GCSqGSIb3DQEBCwUAA4ICAQDD
// SIG // 1nJSyEPDqSgnfkFifIbteJb7NkZCbRj5yBGiT1f9fTGv
// SIG // Ub5CW7k3eSp3uxUqom9LWykcNfQa/Yfw0libEim9YRjU
// SIG // NcL42oIFqtp/7rl9gg61oiB8PB+6vLEmjXkYxUUR8WjK
// SIG // KC5Q5dx96B21faSco2MOmvjYxGUR7An+4529lQPPLqbE
// SIG // KRjcNQb+p+mkQH2XeMbsh5EQCkTuYAimFTgnui2ZPFLE
// SIG // uBpxBK5z2HnKneHUJ9i4pcKWdCqF1AOVN8gXIH0R0Ffl
// SIG // McCg5TW8v90Vwx/mP3aE2Ige1uE8M9YNBn5776PxmA16
// SIG // Z+c2s+hYI+9sJZhhRA8aSYacrlLz7aU/56OvEYRERQZt
// SIG // tuAFkrV+M/J+tCeGNv0Gd75Y4lKLMp5/0xoOviPBdB2r
// SIG // D5C/U+B8qt1bBqQLVZ1wHRy0/6HhJxbOi2IgGJaOCYLG
// SIG // X2zz0VAT6mZ2BTWrJmcK6SDv7rX7psgC+Cf1t0R1aWCk
// SIG // CHJtpYuyKjf7UodRazevOf6V01XkrARHKrI7bQoHFL+s
// SIG // un2liJCBjN51mDWoEgUCEvwB3l+RFYAL0aIisc5cTaGX
// SIG // /T8F+iAbz+j2GGVum85gEQS9uLzSedoYPyEXxTblwewG
// SIG // dAxqIZaKozRBow49OnL+5CgooVMf3ZSqpxc2QC0E03l6
// SIG // c/vChkYyqMXq7Lwd4PnHqjCCB3EwggVZoAMCAQICEzMA
// SIG // AAAVxedrngKbSZkAAAAAABUwDQYJKoZIhvcNAQELBQAw
// SIG // gYgxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5n
// SIG // dG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVN
// SIG // aWNyb3NvZnQgQ29ycG9yYXRpb24xMjAwBgNVBAMTKU1p
// SIG // Y3Jvc29mdCBSb290IENlcnRpZmljYXRlIEF1dGhvcml0
// SIG // eSAyMDEwMB4XDTIxMDkzMDE4MjIyNVoXDTMwMDkzMDE4
// SIG // MzIyNVowfDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldh
// SIG // c2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNV
// SIG // BAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEmMCQGA1UE
// SIG // AxMdTWljcm9zb2Z0IFRpbWUtU3RhbXAgUENBIDIwMTAw
// SIG // ggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQDk
// SIG // 4aZM57RyIQt5osvXJHm9DtWC0/3unAcH0qlsTnXIyjVX
// SIG // 9gF/bErg4r25PhdgM/9cT8dm95VTcVrifkpa/rg2Z4VG
// SIG // Iwy1jRPPdzLAEBjoYH1qUoNEt6aORmsHFPPFdvWGUNzB
// SIG // RMhxXFExN6AKOG6N7dcP2CZTfDlhAnrEqv1yaa8dq6z2
// SIG // Nr41JmTamDu6GnszrYBbfowQHJ1S/rboYiXcag/PXfT+
// SIG // jlPP1uyFVk3v3byNpOORj7I5LFGc6XBpDco2LXCOMcg1
// SIG // KL3jtIckw+DJj361VI/c+gVVmG1oO5pGve2krnopN6zL
// SIG // 64NF50ZuyjLVwIYwXE8s4mKyzbnijYjklqwBSru+cakX
// SIG // W2dg3viSkR4dPf0gz3N9QZpGdc3EXzTdEonW/aUgfX78
// SIG // 2Z5F37ZyL9t9X4C626p+Nuw2TPYrbqgSUei/BQOj0XOm
// SIG // TTd0lBw0gg/wEPK3Rxjtp+iZfD9M269ewvPV2HM9Q07B
// SIG // MzlMjgK8QmguEOqEUUbi0b1qGFphAXPKZ6Je1yh2AuIz
// SIG // GHLXpyDwwvoSCtdjbwzJNmSLW6CmgyFdXzB0kZSU2LlQ
// SIG // +QuJYfM2BjUYhEfb3BvR/bLUHMVr9lxSUV0S2yW6r1AF
// SIG // emzFER1y7435UsSFF5PAPBXbGjfHCBUYP3irRbb1Hode
// SIG // 2o+eFnJpxq57t7c+auIurQIDAQABo4IB3TCCAdkwEgYJ
// SIG // KwYBBAGCNxUBBAUCAwEAATAjBgkrBgEEAYI3FQIEFgQU
// SIG // KqdS/mTEmr6CkTxGNSnPEP8vBO4wHQYDVR0OBBYEFJ+n
// SIG // FV0AXmJdg/Tl0mWnG1M1GelyMFwGA1UdIARVMFMwUQYM
// SIG // KwYBBAGCN0yDfQEBMEEwPwYIKwYBBQUHAgEWM2h0dHA6
// SIG // Ly93d3cubWljcm9zb2Z0LmNvbS9wa2lvcHMvRG9jcy9S
// SIG // ZXBvc2l0b3J5Lmh0bTATBgNVHSUEDDAKBggrBgEFBQcD
// SIG // CDAZBgkrBgEEAYI3FAIEDB4KAFMAdQBiAEMAQTALBgNV
// SIG // HQ8EBAMCAYYwDwYDVR0TAQH/BAUwAwEB/zAfBgNVHSME
// SIG // GDAWgBTV9lbLj+iiXGJo0T2UkFvXzpoYxDBWBgNVHR8E
// SIG // TzBNMEugSaBHhkVodHRwOi8vY3JsLm1pY3Jvc29mdC5j
// SIG // b20vcGtpL2NybC9wcm9kdWN0cy9NaWNSb29DZXJBdXRf
// SIG // MjAxMC0wNi0yMy5jcmwwWgYIKwYBBQUHAQEETjBMMEoG
// SIG // CCsGAQUFBzAChj5odHRwOi8vd3d3Lm1pY3Jvc29mdC5j
// SIG // b20vcGtpL2NlcnRzL01pY1Jvb0NlckF1dF8yMDEwLTA2
// SIG // LTIzLmNydDANBgkqhkiG9w0BAQsFAAOCAgEAnVV9/Cqt
// SIG // 4SwfZwExJFvhnnJL/Klv6lwUtj5OR2R4sQaTlz0xM7U5
// SIG // 18JxNj/aZGx80HU5bbsPMeTCj/ts0aGUGCLu6WZnOlNN
// SIG // 3Zi6th542DYunKmCVgADsAW+iehp4LoJ7nvfam++Kctu
// SIG // 2D9IdQHZGN5tggz1bSNU5HhTdSRXud2f8449xvNo32X2
// SIG // pFaq95W2KFUn0CS9QKC/GbYSEhFdPSfgQJY4rPf5KYnD
// SIG // vBewVIVCs/wMnosZiefwC2qBwoEZQhlSdYo2wh3DYXMu
// SIG // LGt7bj8sCXgU6ZGyqVvfSaN0DLzskYDSPeZKPmY7T7uG
// SIG // +jIa2Zb0j/aRAfbOxnT99kxybxCrdTDFNLB62FD+Cljd
// SIG // QDzHVG2dY3RILLFORy3BFARxv2T5JL5zbcqOCb2zAVdJ
// SIG // VGTZc9d/HltEAY5aGZFrDZ+kKNxnGSgkujhLmm77IVRr
// SIG // akURR6nxt67I6IleT53S0Ex2tVdUCbFpAUR+fKFhbHP+
// SIG // CrvsQWY9af3LwUFJfn6Tvsv4O+S3Fb+0zj6lMVGEvL8C
// SIG // wYKiexcdFYmNcP7ntdAoGokLjzbaukz5m/8K6TT4JDVn
// SIG // K+ANuOaMmdbhIurwJ0I9JZTmdHRbatGePu1+oDEzfbzL
// SIG // 6Xu/OHBE0ZDxyKs6ijoIYn/ZcGNTTY3ugm2lBRDBcQZq
// SIG // ELQdVTNYs6FwZvKhggLLMIICNAIBATCB+KGB0KSBzTCB
// SIG // yjELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0
// SIG // b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1p
// SIG // Y3Jvc29mdCBDb3Jwb3JhdGlvbjElMCMGA1UECxMcTWlj
// SIG // cm9zb2Z0IEFtZXJpY2EgT3BlcmF0aW9uczEmMCQGA1UE
// SIG // CxMdVGhhbGVzIFRTUyBFU046N0JGMS1FM0VBLUI4MDgx
// SIG // JTAjBgNVBAMTHE1pY3Jvc29mdCBUaW1lLVN0YW1wIFNl
// SIG // cnZpY2WiIwoBATAHBgUrDgMCGgMVAN/OE1C7xjU0ClID
// SIG // XQBiucAY7suyoIGDMIGApH4wfDELMAkGA1UEBhMCVVMx
// SIG // EzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1Jl
// SIG // ZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3Jh
// SIG // dGlvbjEmMCQGA1UEAxMdTWljcm9zb2Z0IFRpbWUtU3Rh
// SIG // bXAgUENBIDIwMTAwDQYJKoZIhvcNAQEFBQACBQDnvEmH
// SIG // MCIYDzIwMjMwMzE1MjE0MTI3WhgPMjAyMzAzMTYyMTQx
// SIG // MjdaMHQwOgYKKwYBBAGEWQoEATEsMCowCgIFAOe8SYcC
// SIG // AQAwBwIBAAICK1QwBwIBAAICEcswCgIFAOe9mwcCAQAw
// SIG // NgYKKwYBBAGEWQoEAjEoMCYwDAYKKwYBBAGEWQoDAqAK
// SIG // MAgCAQACAwehIKEKMAgCAQACAwGGoDANBgkqhkiG9w0B
// SIG // AQUFAAOBgQBGb3V5SpBkUL0gg8IZ2I4Dd2UCEfvGKqiu
// SIG // 4lQ+D8jn0rLXUE/FfxcyCCSdlnIyT6AzVVkMt1502i/D
// SIG // QFzbdZtTBMWMrjYxjTy2xSO+m+Gboamc/jLEjuYJorov
// SIG // NsJxrte4S3/tHdYkR+n4D7x+Vs1EQqwt5cx+I8PkEv6M
// SIG // NfxcojGCBA0wggQJAgEBMIGTMHwxCzAJBgNVBAYTAlVT
// SIG // MRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdS
// SIG // ZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9y
// SIG // YXRpb24xJjAkBgNVBAMTHU1pY3Jvc29mdCBUaW1lLVN0
// SIG // YW1wIFBDQSAyMDEwAhMzAAAByPmw7mft6mtGAAEAAAHI
// SIG // MA0GCWCGSAFlAwQCAQUAoIIBSjAaBgkqhkiG9w0BCQMx
// SIG // DQYLKoZIhvcNAQkQAQQwLwYJKoZIhvcNAQkEMSIEIMl3
// SIG // zK0pZm5tCoa1oU+6BYGPNz616isl1FEQDyvadu2gMIH6
// SIG // BgsqhkiG9w0BCRACLzGB6jCB5zCB5DCBvQQgYgCYz80/
// SIG // baMvxw6jcqSvL0FW4TdvA09nxHfsPhuEA2YwgZgwgYCk
// SIG // fjB8MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGlu
// SIG // Z3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMV
// SIG // TWljcm9zb2Z0IENvcnBvcmF0aW9uMSYwJAYDVQQDEx1N
// SIG // aWNyb3NvZnQgVGltZS1TdGFtcCBQQ0EgMjAxMAITMwAA
// SIG // Acj5sO5n7eprRgABAAAByDAiBCAOXp96hpM25oVjPpg6
// SIG // ke489GTqsoT/BZScWgT+C8izdDANBgkqhkiG9w0BAQsF
// SIG // AASCAgBQb2fIsp2Hb+D5BMPSImedNnQDPr/penjltJkB
// SIG // PKo809IKpmOmm/CWW7XWerjWj2tT8Dn4PFjV6gM5bt6h
// SIG // I+j3DwfTpUyt0xg5J+QZm0YX57N5MOb0TeckmbdNY/0M
// SIG // c7B06WCrvfqiFnJ5HBJDbHxFPs50KWceQ17sZJVKQxvX
// SIG // dvnlOW5i7HkXkBpMXt9PAV52Zf6ThI1B9zKFJn4E+tfC
// SIG // NFiB+8vMdz9YGu6ePhHCaiha/mBQcw5XKeshi392kmD4
// SIG // asLI5W7tHTGhFAB8RyUidq4Dsbt0BE/AZe5OaSJq2wYK
// SIG // qEoa/Rv1u8vNK7Dx9X6ubxabUhXrpvgRbdjY+JpDg4wZ
// SIG // D29mCHDwEYW16ybABfOtnkokR/7q3CGT+YSyk60KVzu8
// SIG // /gE28Va73Jci5j8EDijDZ090wHFSgrLlCHS4uRV9Sjuw
// SIG // HRd7bqdkALaenrup+TyeOKn5lA5DO7q+cCMQb8YrJDXU
// SIG // CTSSup7KyIUGzBM5+kCDkQZVVFhwUeKkdlZly0JXoMyg
// SIG // VmglteucPDUBjqMNeAuxoLEikBZGpktS+Q0sB107QoDm
// SIG // bn8UpTlvIapT7R63zy2o5KPMZtEd5n6w0wq5/xpCJ9vD
// SIG // azZwaZ5Obif01x/sC6+6vl444/r8TVPVwE3tSAbKYYDP
// SIG // qb+PKSdmRQUTehFPhsDpIVN2F3P95Q==
// SIG // End signature block
