!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=8)}({0:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.validateTeamNumber=t.validateProject=void 0,t.validateProject=function(){const e=document.getElementById("projectName"),t=e.value.match(/\w[\w-]*$/gm),n=document.getElementById("projectnamediv");return null===t||0===t.length?(n.innerText=window.i18nTrans("ui","Invalid project name"),n.classList.add("error"),e.classList.add("error"),!1):(n.innerText=window.i18nTrans("ui","Project Name"),n.classList.remove("error"),e.classList.remove("error"),!0)},t.validateTeamNumber=function(){const e=document.getElementById("teamNumber"),t=e.value.match(/^\d{1,5}$/gm),n=document.getElementById("teamnumberdiv");return null===t||0===t.length?(n.innerText=window.i18nTrans("ui","Invalid team number"),n.classList.add("error"),e.classList.add("error"),!1):(n.innerText=window.i18nTrans("ui","Team Number"),n.classList.remove("error"),e.classList.remove("error"),!0)}},8:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(0),o=acquireVsCodeApi();function a(){document.activeElement.blur(),o.postMessage({type:"gradle2020"})}function d(){document.activeElement.blur(),o.postMessage({type:"newproject"})}function c(){const e=r.validateTeamNumber(),t=r.validateProject();e&&t&&(document.activeElement.blur(),o.postMessage({data:{desktop:document.getElementById("desktopCB").checked,fromProps:document.getElementById("gradle2020Input").value,newFolder:document.getElementById("newFolderCB").checked,projectName:document.getElementById("projectName").value,teamNumber:document.getElementById("teamNumber").value,toFolder:document.getElementById("projectFolder").value},type:"importproject"}))}window.addEventListener("message",e=>{const t=e.data;switch(t.type){case"gradle2020":document.getElementById("gradle2020Input").value=t.data;break;case"projectname":const e=document.getElementById("projectName");e.value=t.data,e.disabled=!1,r.validateProject();break;case"newproject":document.getElementById("projectFolder").value=t.data;break;case"teamnumber":document.getElementById("teamNumber").value=t.data,r.validateTeamNumber()}}),window.addEventListener("load",e=>{document.getElementById("gradle2020SelectButton").onclick=a,document.getElementById("projectSelectButton").onclick=d,document.getElementById("projectName").oninput=r.validateProject,document.getElementById("teamNumber").oninput=r.validateTeamNumber,document.getElementById("importProject").onclick=c})}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,